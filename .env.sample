# üì¶ .env.sample
# Copy this file to .env and fill in the actual values
# Command: cp .env.sample .env

# === MongoDB Configuration ===

# MongoDB connection URI for development/production environments.
# Format: mongodb://<username>:<password>@<host>:<port>/<database>
# Example: mongodb://user:pass@localhost:27017/mydatabase
MONGO_URL='mongodb://your_username:your_password@host:port/database_name'

# Set the environment
# NODE_ENV can be 'development', 'production', or 'test'
# When set to `"test"`, a test database is used, and no `MONGO_URL` is required. This allows for out-of-the-box testing without a live database.
NODE_ENV=test

# === Notes ===
# Do NOT use real credentials in this file.
# In production, make sure this file is excluded from version control.
# For test, the in-memory MongoDB server will be used automatically if NODE_ENV=test

# === CORS Configuration ===
# CORS (Cross-Origin Resource Sharing) settings
# By default, CORS is disabled.
# Default methods: GET, POST, PUT, DELETE
ALLOWED_ORIGINS=
ALLOWED_METHODS=
ALLOWED_HEADERS=

# === JWT Configuration ===
# JWT (JSON Web Token) secret key for signing tokens
# A cryptographically secure secret used to sign and verify JSON Web Tokens (JWTs).
# This is required for authentication to work correctly.
# üîê Use a long, random string‚Äîat least 32 characters, ideally generated using a password manager or Node.js:
# $ node -e "console.log(require('crypto').randomBytes(64).toString('hex'))"
JWT_SECRET=

# === Auth0 Configuration ===
# Auth0 Domain: Found in your Auth0 Application settings.
AUTH0_DOMAIN=
# Auth0 Audience: The API identifier for your Auth0 API.
AUTH0_AUDIENCE=
# Auth0 Client ID: Found in your Auth0 Application settings.
AUTH0_CLIENT_ID=